package com.golden.website.dao;

import com.golden.website.dataobject.WebsiteUser;
import org.apache.ibatis.annotations.*;

import java.util.List;
import java.util.Map;

@Mapper
public interface WebsiteUserMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table website_user
     *
     * @mbg.generated
     */
    @Delete("delete from website_user where id =#{id}")
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table website_user
     *
     * @mbg.generated
     */
    @Insert("insert into website_user (id,loginUserName, state, errorCount, registerTime, sex, name, role  )values (#{id},#{loginusername}, #{state}, #{errorcount},#{registertime}, #{sex}, #{name}, #{role})")
    int insert(WebsiteUser record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table website_user
     *
     * @mbg.generated
     */
    @Select("SELECT * FROM WEBSITE_USER WHERE ID =#{id}")
    WebsiteUser selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table website_user
     *
     * @mbg.generated
     */
    @Select("select a.id,a.loginusername,a.name,a.registerTime,b.enumvalue as sexenumvalue,c.enumvalue as stateenumvalue ,a.role,d.enumvalue as rolename from website_user a " +
            "left join website_enum b on a.sex = b.enumkey " +
            "left join website_enum c on a.state = c.enumkey " +
            "left join website_enum d on a.role = d.enumkey " +
            "where b.type = 5 and c.type = 4  and d.type = 6 " +
            "order by registertime desc")
    List<WebsiteUser> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table website_user
     *
     * @mbg.generated
     */
    @Update("update website_user set sex=#{sex},state=#{state}, role = #{role} where id = #{id}")
    int updateByPrimaryKey(WebsiteUser record);

    @Select("select loginusername from WEBSITE_USER  where loginusername = #{loginusername}")
    List<WebsiteUser> checkLoginusername(String loginusername);

    @Select("select a.loginUserName ,a.errorCount,a.state,a.role  from WEBSITE_USER a  left join website_pwd b on a.id = b.id where a.loginUserName = #{loginusername} and b.passWord = #{password}")
    WebsiteUser checkLoginusernameAndPassword(WebsiteUser record);

    @Select("select * from WEBSITE_USER where loginUserName = #{loginusername}")
    WebsiteUser selectByLoginUserName(String loginusername);

    @Update("update WEBSITE_USER set errorCount = (errorCount + 1) where loginusername = #{loginusername}")
    int updateByLoginUsername_errorCount(String loginusername);

    @Update("update WEBSITE_USER set state = (state + 1) where loginusername = #{loginusername}")
    int updateByLoginUsername_State(String loginusername);

    @Update("update WEBSITE_USER set errorcount = 0 where loginusername = #{loginusername}")
    int updateErrotCountByLoginUserName(String loginusername);

    @Update("update WEBSITE_PWD set passWord = #{password} where id = (select id from website_user where loginusername = #{loginusername})")
    int updatePwdByLoginusername(WebsiteUser record);

    @Update("update WEBSITE_USER set name = #{name},sex = #{sex} where loginusername = #{loginusername}")
    int updateNameOrSexByLoginusername(WebsiteUser record);

    @Select("select role from WEBSITE_USER  where loginusername = #{loginusername}")
    WebsiteUser getRoleByLoginusername(String loginusername);

    @Select("SELECT a.ID,a.NAME,b.PHONE FROM website_user a LEFT JOIN website_invoice b  on a.id = b.id where a.loginUserName = #{loginusername}")
    Map getUserInfoByLoginName(String loginusername);
}